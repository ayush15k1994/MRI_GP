import java.awt.BorderLayout;
import java.awt.Panel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

public class test extends JFrame {
	JFrame test = new JFrame();
	JFrame frame = new JFrame();
	JLabel label = new JLabel("");
	JMenuBar menubar = new JMenuBar();

	JLabel patientName = new JLabel("<html><font color= 'blue'> Patient Name ");
	JLabel patientId = new JLabel(
			"<html><font color= 'blue'> Patient unique ID ");
	JLabel patientAge = new JLabel("<html><font color= 'blue'> Patient Age");
	JLabel Date = new JLabel("<html><font color= 'blue'> Date of admisssion ");
	JLabel Path = new JLabel("<html><font color= 'blue'> Browse image to test");

	DefaultComboBoxModel<String> model = new DefaultComboBoxModel<String>();
	DefaultComboBoxModel<String> model2 = new DefaultComboBoxModel<String>();
	DefaultComboBoxModel<String> model3 = new DefaultComboBoxModel<String>();
	// JLabel msg = new JLabel("browse image you want to test ");

	JTextField name = new JTextField("");
	JTextField id = new JTextField("");
	JTextField age = new JTextField("");
	// JTextField date = new JTextField("");
	JTextField path = new JTextField("");
	String userName = "";
	String userId = "";
	String userAge = "";
	String mDescription = "<html><font color ='blue'>"
			+ " is cancerous. Malignant tumors <br>can invade and destroy "
			+ "nearby tissue<br>  and spread to other parts of the body.";
	String bDescription = "<html><font color ='blue'> Benign is not cancerous. Benign tumors<br> may grow larger but do"
			+ " not spread to <br>otherparts of the body.";

	JButton browse = new JButton("<html><font color= 'blue'>browse ");
	JButton submit = new JButton("<html><font color= 'blue'>submit ");

	JComboBox<String> day = new JComboBox<String>();
	String selectedDay;
	JComboBox<String> month = new JComboBox<String>();
	String selectedMonth;
	JComboBox<String> year = new JComboBox<String>();
	String selectedYear;

	String filename = File.separator + "tmp";
	JFileChooser fc = new JFileChooser(new File(filename));
	File selFile = null;

	test(String imagePath, final report r) {
		// System.out.println(r.dateOfAdmisson);
		// super("psa");
		createMenuBar();
		test.setJMenuBar(menubar);
		name.getDocument().addDocumentListener(new DocumentListener() {

			@Override
			public void changedUpdate(DocumentEvent arg0) {
				warn();
			}

			@Override
			public void insertUpdate(DocumentEvent arg0) {
				warn();
			}

			@Override
			public void removeUpdate(DocumentEvent arg0) {
				warn();
			}

			public void warn() {
				userName = name.getText();

			}
		});

		age.getDocument().addDocumentListener(new DocumentListener() {

			@Override
			public void changedUpdate(DocumentEvent arg0) {
				warn();
			}

			@Override
			public void insertUpdate(DocumentEvent arg0) {
				warn();
			}

			@Override
			public void removeUpdate(DocumentEvent arg0) {
				warn();
			}

			public void warn() {
				userAge = age.getText();

			}
		});

		id.getDocument().addDocumentListener(new DocumentListener() {

			@Override
			public void changedUpdate(DocumentEvent arg0) {
				warn();
			}

			@Override
			public void insertUpdate(DocumentEvent arg0) {
				warn();
			}

			@Override
			public void removeUpdate(DocumentEvent arg0) {
				warn();
			}

			public void warn() {
				userId = id.getText();

			}
		});

		day.setModel(model);
		month.setModel(model2);
		year.setModel(model3);

		day.addItem(" ");
		for (int i = 1; i <= 31; i++) {
			day.addItem(i + "");
		}

		month.addItem(" ");
		for (int i = 1; i <= 12; i++) {
			month.addItem(i + "");
		}

		year.addItem(" ");
		for (int i = 2000; i <= 2015; i++) {
			year.addItem(i + "");
		}

		day.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent e) {
				if (e.getStateChange() == ItemEvent.SELECTED) {
					selectedDay = model.getSelectedItem().toString();
					System.out.println("selected day " + selectedDay);
				}
			}
		});

		month.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent e) {
				if (e.getStateChange() == ItemEvent.SELECTED) {
					selectedMonth = model2.getSelectedItem().toString();
					System.out.println("selected month " + selectedMonth);
				}
			}
		});

		year.addItemListener(new ItemListener() {
			@Override
			public void itemStateChanged(ItemEvent e) {
				if (e.getStateChange() == ItemEvent.SELECTED) {
					selectedYear = model3.getSelectedItem().toString();
					System.out.println("selected year " + selectedYear);
				}
			}
		});

		label.setIcon(new ImageIcon("C:/Users/DreamOnline/Desktop/6.png"));

		patientName.setBounds(110, 60, 80, 25);
		label.add(patientName);
		name.setBounds(200, 60, 160, 25);
		label.add(name);

		patientId.setBounds(110, 90, 80, 25);
		label.add(patientId);
		id.setBounds(200, 90, 160, 25);
		label.add(id);

		patientAge.setBounds(110, 120, 80, 25);
		label.add(patientAge);
		age.setBounds(200, 120, 160, 25);
		label.add(age);

		Date.setBounds(110, 160, 80, 25);
		label.add(Date);

		day.setBounds(200, 160, 50, 25);
		label.add(day);

		month.setBounds(260, 160, 50, 25);
		label.add(month);

		year.setBounds(320, 160, 50, 25);
		label.add(year);

		Path.setBounds(110, 190, 80, 25);
		label.add(Path);
		path.setBounds(200, 190, 160, 25);
		label.add(path);

		browse.setBounds(110, 235, 150, 25);
		label.add(browse);

		submit.setBounds(310, 235, 150, 25);
		label.add(submit);

		test.add(label);
		test.setSize(600, 400);

		test.setTitle("psa ");
		test.show();
		test.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				System.exit(0);
			}
		});

		browse.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				selFile = fc.getSelectedFile();
				fc.showSaveDialog(frame);
				selFile = fc.getSelectedFile();

			}

		});

		submit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (userName == "" || userName == null) {
					JOptionPane p = new JOptionPane();
					Object x = p.showInputDialog("Name must be inserted", "");
					userName = x.toString();
				}

				while (userAge == "" || userAge == null) {
					JOptionPane p = new JOptionPane();
					Object x = p.showInputDialog("Age must be inserted", "");
					userAge = x.toString();
				}

				while (selectedDay == "" || selectedDay == null) {
					JOptionPane p = new JOptionPane();
					Object x = p.showInputDialog(
							"Day of Admission must be inserted", "");
					selectedDay = x.toString();
				}

				while (selectedMonth == "" || selectedMonth == null) {
					JOptionPane p = new JOptionPane();
					Object x = p.showInputDialog(
							"Month of Admission must be inserted", "");
					selectedMonth = x.toString();
				}

				while (selectedYear == "" || selectedYear == null) {
					JOptionPane p = new JOptionPane();
					Object x = p.showInputDialog(
							"Year of Admission must be inserted", "");
					selectedYear = x.toString();
				}

				while (!selFile.getPath().endsWith(".bmp")) {
					selFile = fc.getSelectedFile();
					fc.showSaveDialog(frame);
					selFile = fc.getSelectedFile();
				}

				r.age = userAge;
				r.patient = userName;
				r.Status = "benign";
				r.description = "isa w alf alf mabrok:D ";
				r.dateOfAdmisson = selectedDay + "/" + selectedMonth + "/"
						+ selectedYear;

				try {
					// insert into patient values(patient_seq.nextval , 'xxx',
					// 20 , '25/1/2011' , 'benign' , 'not cancer' , 1);

					Class.forName("oracle.jdbc.driver.OracleDriver");
					Connection con = DriverManager.getConnection(
							"jdbc:oracle:thin:@localhost:1521:proj", "yasso",
							"yasso");

					PreparedStatement preparedStatement = con
							.prepareStatement("insert into patient values (patient_seq.nextval , ? , ? , ? , ? , ? , ?)");
////////////////////////////////////////////////////////////////////////////////////////////////
					preparedStatement.setString(1, r.patient);
					preparedStatement.setLong(2, Integer.parseInt(r.age));
					preparedStatement.setString(3, r.dateOfAdmisson);
					preparedStatement.setString(4, r.Status);
					preparedStatement.setString(5, r.description);
					preparedStatement.setLong(6, Integer.parseInt(r.doctor_id));

					int result = preparedStatement.executeUpdate();
					if (result == 1){
						System.out.println("one row inserted");
					}

				} catch (ClassNotFoundException | SQLException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}

				close();
				confirm c = new confirm(selFile.getPath(), r);

			}

		});

	}

	private void createMenuBar() {

		ImageIcon iconAbout = new ImageIcon("open.png");
		ImageIcon iconExit = new ImageIcon("exit.png");

		JMenu fileMenu = new JMenu("File");
		JMenu helpMenu = new JMenu("Help");

		JMenuItem exitMi = new JMenuItem("Exit", iconExit);
		JMenuItem aboutMi = new JMenuItem("About", iconAbout);
		exitMi.setToolTipText("Exit application");

		exitMi.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent event) {
				System.exit(0);
			}
		});

		aboutMi.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {

				JTextField textarea = new JTextField(10);
				JOptionPane
						.showMessageDialog(
								null,
								"<html><font color='blue'>welcome in our prostate cancer detection",
								"PCD", JOptionPane.PLAIN_MESSAGE);

			}
		});

		fileMenu.addSeparator();
		fileMenu.add(exitMi);

		helpMenu.add(aboutMi);
		menubar.add(fileMenu);
		menubar.add(helpMenu);
		// setJMenuBar(menubar);

	}

	private void close() {
		test.setVisible(false);
	}
}
